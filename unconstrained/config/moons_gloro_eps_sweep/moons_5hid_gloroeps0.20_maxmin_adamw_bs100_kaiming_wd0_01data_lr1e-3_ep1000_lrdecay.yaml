manual_seed: 123

Distributed:
  dist_url: tcp://127.0.0.1:6789
  dist_backend: 'nccl'
  multiprocessing_distributed: False
  world_size: 1
  rank: 0

training_data:
  type: 'Moons2D'
  kwargs:
    nsamples: 2000
    noise: 0.0
    uniform_noise: 0.1
  transformation:
    totensor:
      type: 'torchvision.transforms.ToTensor'

validation_data:
  type: 'Moons2D'
  kwargs:
    nsamples: 20000
    noise: 0.0
    uniform_noise: 0.1
  transformation:
    totensor:
      type: 'torchvision.transforms.ToTensor'


architecture:
  type: 'LipschitzModel'
  kwargs:
      p: 2
      classifier_layer: 'fc'
      use_softmax: False
      ignore_batchnorm: False
      calibrate_outputs: False

  initialization:
    conv: 'kaiming'
    linear: 'kaiming'

  layers:
    fc1:
      type: 'nn.Linear'
      args: [2, 10]
    fc1_relu:
      type: 'MaxMin'
      num_units: 5
    fc2:
      type: 'nn.Linear'
      args: [10, 20]
    fc2_relu:
      type: 'MaxMin'
      num_units: 10
    fc3:
      type: 'nn.Linear'
      args: [20, 40]
    fc3_relu:
      type: 'MaxMin'
      num_units: 20
    fc4:
      type: 'nn.Linear'
      args: [40, 40]
    fc4_relu:
      type: 'MaxMin'
      num_units: 20
    fc5:
      type: 'nn.Linear'
      args: [40, 20]
    fc5_relu:
      type: 'MaxMin'
      num_units: 10
    fc6:
      type: 'nn.Linear'
      args: [20, 10]
    fc6_relu:
      type: 'MaxMin'
      num_units: 5
    fc:
      type: 'nn.Linear'
      args: [10, 2]

loss:
  gloro:
    type: 'GloroLoss'
    num_iter: 5
    MATCH_LAYER_output_module: 'fc'
    detach_lipschitz_computer: False
    epsilon: 0.2

metrics:
  cleanacc:
    type: 'Accuracy'
    topk: 1
  robustacc0_20:
    type: 'RobustAccuracy'
    MATCH_LAYER_output_module: 'fc'
    epsilon: 0.2
    data_std: [1,1,1]
  robustacc0_40:
    type: 'RobustAccuracy'
    MATCH_LAYER_output_module: 'fc'
    epsilon: 0.4
    data_std: [1,1,1]
  logitdist:
    type: 'LogitDistance'
  marginratio_avg:
    type: 'MarginRatio'
    data_std: [1,1,1]
  marginratio_min:
    type: 'MarginRatio'
    data_std: [1,1,1]
    reduce: 'min'
  marginratiod:
    type: 'MarginRatioDistribution'
    data_std: [1, 1, 1]


evaluations:
  decision_boundary:
    type: 'DecisionBoundaryPlot'
    eval_freq: 100
    robust_logit_index:
    xlim: [-1.5, 2.5]
    ylim: [-1.0, 1.5]
    nsamples: 1000000
    pairwise: True
    levels: [-0.20, 0.00, 0.20]
    save_path: exp/moons/gloro_eps_sweep/$MODELNAME/

  # lip_lower_bound:
  #   type: 'LowerLipschitzBoundEstimation'
  #   eval_freq: 100
  #   robust_logit_index: 
  #   data_mean: [0, 0, 0]
  #   data_std: [1, 1, 1]
  #   n_samples: 2000
  #   batch_size: 4000
  #   max_iter: 1000
  #   # input_norm_correction: 0.2
  #   optimizer_cfg:
  #     type: 'Adam'
  #     lr: 3.e-4
  #     weight_decay: 0

training:
  epochs: 1001
  batch_size: 100  # batch size for training
  
  sync_bn: True
  workers: 4  # data loader workers
  train_gpu: [0]

  print_freq: 10
  save_freq: 2000 # never saves
  save_path: exp/moons/gloro_eps_sweep/$MODELNAME/model

  optimizer:
    type: 'AdamW'
    lr: 1.e-3
    weight_decay: 0 #5.e-4
  lrscheduler:
    type: MultiStepLR
    milestones: [8000] #1200, 1600, 1950]  # epoch 100 and 150
    gamma: 0.1

validate:
  batch_size: 10000 # batch size for validation during training, memory and speed tradeoff
  print_freq: 1
